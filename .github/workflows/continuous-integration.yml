name: Continuous Integration Workflow

on:
  pull_request:
  push:
    branches: [main]

jobs:
  lint:
    name: Linting check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
      - name: Linting check
        run: |
          echo "Checking linting against $(poetry run black --version)"
          poetry run black . --check
  type-check:
    name: Static type analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
        with:
          python_version: 3.9
      - name: Static typing checks
        run: poetry run mypy app
  dependency-checks:
    name: Dependency vulnerability checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
        with:
          python_version: 3.9
      - name: Run safety
        run: poetry run safety check
  static-analysis:
    name: Static security checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
        with:
          python_version: 3.9
      - name: Run bandit
        run: poetry run bandit -x app/app/tests,/app/alembic --ini .bandit -r app/app
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
        with:
          python_version: 3.9
      - name: Run unit tests
        working-directory: ./app
        env:
          ENVIRONMENT: test
          COVERAGE_FILE: .coverage.unit
        run: poetry run pytest -m unit
      - name: Store coverage report
        uses: actions/upload-artifact@v3
        with:
          name: .coverage.unit
          path: ./

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: test
      DOCKER_BUILDKIT: "1"
    steps:
      - uses: actions/checkout@v3
      - name: Setup environment and run integration tests
        run: make test-integration
        env:
          COVERAGE_FILE: coverage.integration
      - name: Store coverage report
        uses: actions/upload-artifact@v3
        with:
          name: .coverage.integration
          path: ./

  code-coverage:
    name: Validate code coverage
    needs:
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      # TODO: Full dependencies are not required, just 'coverage'
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/dependency-mgmt
        with:
          python_version: 3.9
      - name: Download unit test coverage report
        uses: actions/download-artifact@v3
        id: download-unit
        with:
          name: .coverage.unit
      - name: Download integration test coverage report
        uses: actions/download-artifact@v3
        id: download-integration
        with:
          name: .coverage.integration
      - name: Combine code coverage reports
        run: | 
          coverage combine
          report="${coverage report -m}"
          echo "::set-output name=report::${report}"
      - name: Post code coverage to pull request
        uses: mshick/add-pr-comment@v1
        id: comment
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## Code coverage: ${{ steps.code-coverage.outcome }}
            ```
            ${{ steps.code-coverage.outputs.report}}
            ```
      - name: Verify code coverage percent
        run: coverage report --fail-under=80

  docker-build:
    name: Build docker image
    # To verify the template can build successfully, build the template container.
    # After the template is forked, this section can be deleted.
    if: github.repository == 'hinge-health/fastapi-template'
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: "1"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Docker build
        run: make docker-build

  docker-build-and-push:
    name: Build docker image and publish
    # After the template has been forked, the built container should be published.
    if: github.repository != 'hinge-health/fastapi-template'
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - dependency-checks
      - static-analysis
      - unit-tests
      - integration-tests
      - code-coverage
    env:
      DOCKER_BUILDKIT: "1"
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR__WRITE_ONLY_ACCESS_KEY_ID__RAW }}
          aws-secret-access-key: ${{ secrets.AWS_ECR__WRITE_ONLY_SECRET_ACCESS_KEY__RAW }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build
        run: make docker-build
      - name: Docker tag
        run: make docker-tag
      - name: Docker push
        run: make docker-push

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - docker-build-and-push
    steps:
      - uses: actions/checkout@v3
      - name: Get shortened sha from git
        run: echo '::set-output name=value::$(git rev-parse --short HEAD)'
        id: gitsha
      - uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.gitsha.outputs.value }}
          token: ${{ secrets.GITHUB_TOKEN }}
