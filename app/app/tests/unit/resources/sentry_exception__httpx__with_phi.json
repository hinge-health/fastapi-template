{
  "level": "error",
  "exception": {
    "values": [
      {
        "module": null,
        "type": "RuntimeError",
        "value": "Cannot send a request, as the client has been closed.",
        "mechanism": {
          "type": "asgi",
          "handled": false
        },
        "stacktrace": {
          "frames": [
            {
              "filename": "fastapi/applications.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/fastapi/applications.py",
              "function": "__call__",
              "module": "fastapi.applications",
              "lineno": 199,
              "pre_context": [
                "        if self.root_path:",
                "            scope[\"root_path\"] = self.root_path",
                "        if AsyncExitStack:",
                "            async with AsyncExitStack() as stack:",
                "                scope[\"fastapi_astack\"] = stack"
              ],
              "context_line": "                await super().__call__(scope, receive, send)",
              "post_context": [
                "        else:",
                "            await super().__call__(scope, receive, send)  # pragma: no cover",
                "",
                "    def add_api_route(",
                "        self,"
              ],
              "vars": {
                "self": "<fastapi.applications.FastAPI object at 0x110c13450>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function MessageLoggerMiddleware.__call__.<locals>.inner_send at 0x110c35680>",
                "stack": "<contextlib.AsyncExitStack object at 0x110c3f450>",
                "__class__": "<class 'fastapi.applications.FastAPI'>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/applications.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/applications.py",
              "function": "__call__",
              "module": "starlette.applications",
              "lineno": 112,
              "pre_context": [
                "    def url_path_for(self, name: str, **path_params: str) -> URLPath:",
                "        return self.router.url_path_for(name, **path_params)",
                "",
                "    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:",
                "        scope[\"app\"] = self"
              ],
              "context_line": "        await self.middleware_stack(scope, receive, send)",
              "post_context": [
                "",
                "    # The following usages are now discouraged in favour of configuration",
                "    # \u00a0during Starlette.__init__(...)",
                "    def on_event(self, event_type: str) -> typing.Callable:",
                "        return self.router.on_event(event_type)"
              ],
              "vars": {
                "self": "<fastapi.applications.FastAPI object at 0x110c13450>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function MessageLoggerMiddleware.__call__.<locals>.inner_send at 0x110c35680>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/errors.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/errors.py",
              "function": "__call__",
              "module": "starlette.middleware.errors",
              "lineno": 181,
              "pre_context": [
                "                await response(scope, receive, send)",
                "",
                "            # We always continue to raise the exception.",
                "            # This allows servers to log the error, or allows test clients",
                "            # to optionally raise the error within the test case."
              ],
              "context_line": "            raise exc from None",
              "post_context": [
                "",
                "    def format_line(",
                "        self, index: int, line: str, frame_lineno: int, frame_index: int",
                "    ) -> str:",
                "        values = {"
              ],
              "vars": {
                "self": "<starlette.middleware.errors.ServerErrorMiddleware object at 0x110c248d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "_send": "<function ServerErrorMiddleware.__call__.<locals>._send at 0x110c35a70>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "response": "<starlette.responses.PlainTextResponse object at 0x110bc8050>",
                "response_started": "False",
                "send": "<function MessageLoggerMiddleware.__call__.<locals>.inner_send at 0x110c35680>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/errors.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/errors.py",
              "function": "__call__",
              "module": "starlette.middleware.errors",
              "lineno": 159,
              "pre_context": [
                "            if message[\"type\"] == \"http.response.start\":",
                "                response_started = True",
                "            await send(message)",
                "",
                "        try:"
              ],
              "context_line": "            await self.app(scope, receive, _send)",
              "post_context": [
                "        except Exception as exc:",
                "            if not response_started:",
                "                request = Request(scope)",
                "                if self.debug:",
                "                    # In debug mode, return traceback responses."
              ],
              "vars": {
                "self": "<starlette.middleware.errors.ServerErrorMiddleware object at 0x110c248d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "_send": "<function ServerErrorMiddleware.__call__.<locals>._send at 0x110c35a70>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "response": "<starlette.responses.PlainTextResponse object at 0x110bc8050>",
                "response_started": "False",
                "send": "<function MessageLoggerMiddleware.__call__.<locals>.inner_send at 0x110c35680>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "__call__",
              "module": "starlette.middleware.base",
              "lineno": 25,
              "pre_context": [
                "        if scope[\"type\"] != \"http\":",
                "            await self.app(scope, receive, send)",
                "            return",
                "",
                "        request = Request(scope, receive=receive)"
              ],
              "context_line": "        response = await self.dispatch_func(request, self.call_next)",
              "post_context": [
                "        await response(scope, receive, send)",
                "",
                "    async def call_next(self, request: Request) -> Response:",
                "        loop = asyncio.get_event_loop()",
                "        queue: \"asyncio.Queue[typing.Optional[Message]]\" = asyncio.Queue()"
              ],
              "vars": {
                "self": "<slowapi.middleware.SlowAPIMiddleware object at 0x110c24890>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function ServerErrorMiddleware.__call__.<locals>._send at 0x110c35a70>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                }
              },
              "in_app": true
            },
            {
              "filename": "slowapi/middleware.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/slowapi/middleware.py",
              "function": "dispatch",
              "module": "slowapi.middleware",
              "lineno": 38,
              "pre_context": [
                "        if name in limiter._exempt_routes:",
                "            return await call_next(request)",
                "",
                "        # there is a decorator for this route we let the decorator handle it",
                "        if name in limiter._route_limits:"
              ],
              "context_line": "            return await call_next(request)",
              "post_context": [
                "",
                "        # let the decorator handle if already in",
                "        if limiter._auto_check and not getattr(",
                "            request.state, \"_rate_limiting_complete\", False",
                "        ):"
              ],
              "vars": {
                "self": "<slowapi.middleware.SlowAPIMiddleware object at 0x110c24890>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "call_next": "<bound method BaseHTTPMiddleware.call_next of <slowapi.middleware.SlowAPIMiddleware object at 0x110c24890>>",
                "app": "<fastapi.applications.FastAPI object at 0x110c13450>",
                "limiter": "<slowapi.extension.Limiter object at 0x10de79510>",
                "handler": "<function get_eligibility_from_change_health at 0x11003d560>",
                "route": "<fastapi.routing.APIRoute object at 0x110c24f50>",
                "match": "<Match.NONE: 0>",
                "_": {},
                "name": "'app.api.v1.endpoints.change_health.get_eligibility_from_change_health'"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "call_next",
              "module": "starlette.middleware.base",
              "lineno": 45,
              "pre_context": [
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()",
                "        if message is None:"
              ],
              "context_line": "            task.result()",
              "post_context": [
                "            raise RuntimeError(\"No response returned.\")",
                "        assert message[\"type\"] == \"http.response.start\"",
                "",
                "        async def body_stream() -> typing.AsyncGenerator[bytes, None]:",
                "            while True:"
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "loop": "<_UnixSelectorEventLoop running=True closed=False debug=False>",
                "coro": "<function BaseHTTPMiddleware.call_next.<locals>.coro at 0x110c35dd0>",
                "message": "None",
                "queue": "<Queue at 0x110c4d150 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "send": "<bound method Queue.put of <Queue at 0x110c4d150 maxsize=0 tasks=1>>",
                "task": "<Task finished coro=<BaseHTTPMiddleware.call_next.<locals>.coro() done, defined at /Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py:36> exception=RuntimeError('Cannot send a request, as the client has been closed.')>",
                "self": "<slowapi.middleware.SlowAPIMiddleware object at 0x110c24890>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "coro",
              "module": "starlette.middleware.base",
              "lineno": 38,
              "pre_context": [
                "        receive = request.receive",
                "        send = queue.put",
                "",
                "        async def coro() -> None:",
                "            try:"
              ],
              "context_line": "                await self.app(scope, receive, send)",
              "post_context": [
                "            finally:",
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()"
              ],
              "vars": {
                "queue": "<Queue at 0x110c4d150 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "self": "<slowapi.middleware.SlowAPIMiddleware object at 0x110c24890>",
                "send": "<bound method Queue.put of <Queue at 0x110c4d150 maxsize=0 tasks=1>>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "__call__",
              "module": "starlette.middleware.base",
              "lineno": 25,
              "pre_context": [
                "        if scope[\"type\"] != \"http\":",
                "            await self.app(scope, receive, send)",
                "            return",
                "",
                "        request = Request(scope, receive=receive)"
              ],
              "context_line": "        response = await self.dispatch_func(request, self.call_next)",
              "post_context": [
                "        await response(scope, receive, send)",
                "",
                "    async def call_next(self, request: Request) -> Response:",
                "        loop = asyncio.get_event_loop()",
                "        queue: \"asyncio.Queue[typing.Optional[Message]]\" = asyncio.Queue()"
              ],
              "vars": {
                "self": "<app.core.middleware.RequestTimingMiddleware object at 0x110c24850>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<bound method Queue.put of <Queue at 0x110c4d150 maxsize=0 tasks=1>>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                }
              },
              "in_app": true
            },
            {
              "filename": "app/core/middleware.py",
              "abs_path": "/Users/trevor.currie/Code/eligibility-service/app/app/core/middleware.py",
              "function": "dispatch",
              "module": "app.core.middleware",
              "lineno": 58,
              "pre_context": [
                "class RequestTimingMiddleware(BaseHTTPMiddleware):",
                "    async def dispatch(",
                "        self, request: Request, call_next: RequestResponseEndpoint",
                "    ) -> Response:",
                "        start_time = time.time()"
              ],
              "context_line": "        response = await call_next(request)",
              "post_context": [
                "        process_time = time.time() - start_time",
                "        response.headers[\"X-Process-Time\"] = str(process_time)",
                "        return response"
              ],
              "vars": {
                "self": "<app.core.middleware.RequestTimingMiddleware object at 0x110c24850>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "call_next": "<bound method BaseHTTPMiddleware.call_next of <app.core.middleware.RequestTimingMiddleware object at 0x110c24850>>",
                "start_time": "1624472674.2283468"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "call_next",
              "module": "starlette.middleware.base",
              "lineno": 45,
              "pre_context": [
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()",
                "        if message is None:"
              ],
              "context_line": "            task.result()",
              "post_context": [
                "            raise RuntimeError(\"No response returned.\")",
                "        assert message[\"type\"] == \"http.response.start\"",
                "",
                "        async def body_stream() -> typing.AsyncGenerator[bytes, None]:",
                "            while True:"
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "loop": "<_UnixSelectorEventLoop running=True closed=False debug=False>",
                "coro": "<function BaseHTTPMiddleware.call_next.<locals>.coro at 0x110c35f80>",
                "message": "None",
                "queue": "<Queue at 0x110c4dfd0 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "send": "<bound method Queue.put of <Queue at 0x110c4dfd0 maxsize=0 tasks=1>>",
                "task": "<Task finished coro=<BaseHTTPMiddleware.call_next.<locals>.coro() done, defined at /Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py:36> exception=RuntimeError('Cannot send a request, as the client has been closed.')>",
                "self": "<app.core.middleware.RequestTimingMiddleware object at 0x110c24850>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "coro",
              "module": "starlette.middleware.base",
              "lineno": 38,
              "pre_context": [
                "        receive = request.receive",
                "        send = queue.put",
                "",
                "        async def coro() -> None:",
                "            try:"
              ],
              "context_line": "                await self.app(scope, receive, send)",
              "post_context": [
                "            finally:",
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()"
              ],
              "vars": {
                "queue": "<Queue at 0x110c4dfd0 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "self": "<app.core.middleware.RequestTimingMiddleware object at 0x110c24850>",
                "send": "<bound method Queue.put of <Queue at 0x110c4dfd0 maxsize=0 tasks=1>>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "__call__",
              "module": "starlette.middleware.base",
              "lineno": 25,
              "pre_context": [
                "        if scope[\"type\"] != \"http\":",
                "            await self.app(scope, receive, send)",
                "            return",
                "",
                "        request = Request(scope, receive=receive)"
              ],
              "context_line": "        response = await self.dispatch_func(request, self.call_next)",
              "post_context": [
                "        await response(scope, receive, send)",
                "",
                "    async def call_next(self, request: Request) -> Response:",
                "        loop = asyncio.get_event_loop()",
                "        queue: \"asyncio.Queue[typing.Optional[Message]]\" = asyncio.Queue()"
              ],
              "vars": {
                "self": "<app.core.middleware.RequestLoggingMiddleware object at 0x110c24810>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<bound method Queue.put of <Queue at 0x110c4dfd0 maxsize=0 tasks=1>>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                }
              },
              "in_app": true
            },
            {
              "filename": "app/core/middleware.py",
              "abs_path": "/Users/trevor.currie/Code/eligibility-service/app/app/core/middleware.py",
              "function": "dispatch",
              "module": "app.core.middleware",
              "lineno": 40,
              "pre_context": [
                "",
                "        logging.info(",
                "            f\"Processing request id: {request_id}\",",
                "            extra={\"request.id\": request_id, **extras},",
                "        )"
              ],
              "context_line": "        response = await call_next(request)",
              "post_context": [
                "        logging.info(",
                "            f\"Sending response to request id: {request_id}.\",",
                "            extra={",
                "                \"request.id\": request_id,",
                "                \"response.status_code\": response.status_code,"
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "call_next": "<bound method BaseHTTPMiddleware.call_next of <app.core.middleware.RequestLoggingMiddleware object at 0x110c24810>>",
                "request_id": "UUID('510b1682-642a-426d-8183-17d74d3d7834')",
                "extras": {
                  "request.type": "'http'",
                  "request.http_version": "'1.1'",
                  "request.server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "request.client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "request.scheme": "'http'",
                  "request.method": "'POST'",
                  "request.path": "'/api/v1/change-health/eligibility'",
                  "request.query_string": "b''"
                },
                "self": "<app.core.middleware.RequestLoggingMiddleware object at 0x110c24810>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "call_next",
              "module": "starlette.middleware.base",
              "lineno": 45,
              "pre_context": [
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()",
                "        if message is None:"
              ],
              "context_line": "            task.result()",
              "post_context": [
                "            raise RuntimeError(\"No response returned.\")",
                "        assert message[\"type\"] == \"http.response.start\"",
                "",
                "        async def body_stream() -> typing.AsyncGenerator[bytes, None]:",
                "            while True:"
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "loop": "<_UnixSelectorEventLoop running=True closed=False debug=False>",
                "coro": "<function BaseHTTPMiddleware.call_next.<locals>.coro at 0x110c48680>",
                "message": "None",
                "queue": "<Queue at 0x110c5b050 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "send": "<bound method Queue.put of <Queue at 0x110c5b050 maxsize=0 tasks=1>>",
                "task": "<Task finished coro=<BaseHTTPMiddleware.call_next.<locals>.coro() done, defined at /Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py:36> exception=RuntimeError('Cannot send a request, as the client has been closed.')>",
                "self": "<app.core.middleware.RequestLoggingMiddleware object at 0x110c24810>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/middleware/base.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/middleware/base.py",
              "function": "coro",
              "module": "starlette.middleware.base",
              "lineno": 38,
              "pre_context": [
                "        receive = request.receive",
                "        send = queue.put",
                "",
                "        async def coro() -> None:",
                "            try:"
              ],
              "context_line": "                await self.app(scope, receive, send)",
              "post_context": [
                "            finally:",
                "                await queue.put(None)",
                "",
                "        task = loop.create_task(coro())",
                "        message = await queue.get()"
              ],
              "vars": {
                "queue": "<Queue at 0x110c5b050 maxsize=0 tasks=1>",
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "self": "<app.core.middleware.RequestLoggingMiddleware object at 0x110c24810>",
                "send": "<bound method Queue.put of <Queue at 0x110c5b050 maxsize=0 tasks=1>>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/exceptions.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/exceptions.py",
              "function": "__call__",
              "module": "starlette.exceptions",
              "lineno": 82,
              "pre_context": [
                "",
                "            if handler is None:",
                "                handler = self._lookup_exception_handler(exc)",
                "",
                "            if handler is None:"
              ],
              "context_line": "                raise exc from None",
              "post_context": [
                "",
                "            if response_started:",
                "                msg = \"Caught handled exception, but response already started.\"",
                "                raise RuntimeError(msg) from exc",
                ""
              ],
              "vars": {
                "self": "<starlette.exceptions.ExceptionMiddleware object at 0x110c24550>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "sender": "<function ExceptionMiddleware.__call__.<locals>.sender at 0x110c48560>",
                "handler": "None",
                "response_started": "False",
                "send": "<bound method Queue.put of <Queue at 0x110c5b050 maxsize=0 tasks=1>>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/exceptions.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/exceptions.py",
              "function": "__call__",
              "module": "starlette.exceptions",
              "lineno": 71,
              "pre_context": [
                "            if message[\"type\"] == \"http.response.start\":",
                "                response_started = True",
                "            await send(message)",
                "",
                "        try:"
              ],
              "context_line": "            await self.app(scope, receive, sender)",
              "post_context": [
                "        except Exception as exc:",
                "            handler = None",
                "",
                "            if isinstance(exc, HTTPException):",
                "                handler = self._status_handlers.get(exc.status_code)"
              ],
              "vars": {
                "self": "<starlette.exceptions.ExceptionMiddleware object at 0x110c24550>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "sender": "<function ExceptionMiddleware.__call__.<locals>.sender at 0x110c48560>",
                "handler": "None",
                "response_started": "False",
                "send": "<bound method Queue.put of <Queue at 0x110c5b050 maxsize=0 tasks=1>>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/routing.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/routing.py",
              "function": "__call__",
              "module": "starlette.routing",
              "lineno": 580,
              "pre_context": [
                "            # Determine if any route matches the incoming scope,",
                "            # and hand over to the matching route if found.",
                "            match, child_scope = route.matches(scope)",
                "            if match == Match.FULL:",
                "                scope.update(child_scope)"
              ],
              "context_line": "                await route.handle(scope, receive, send)",
              "post_context": [
                "                return",
                "            elif match == Match.PARTIAL and partial is None:",
                "                partial = route",
                "                partial_scope = child_scope",
                ""
              ],
              "vars": {
                "self": "<fastapi.routing.APIRouter object at 0x110c134d0>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function ExceptionMiddleware.__call__.<locals>.sender at 0x110c48560>",
                "partial": "None",
                "route": "<fastapi.routing.APIRoute object at 0x110c1d310>",
                "match": "<Match.FULL: 2>",
                "child_scope": {
                  "endpoint": "<function get_eligibility_from_change_health at 0x11003d560>",
                  "path_params": {}
                }
              },
              "in_app": true
            },
            {
              "filename": "starlette/routing.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/routing.py",
              "function": "handle",
              "module": "starlette.routing",
              "lineno": 241,
              "pre_context": [
                "                raise HTTPException(status_code=405)",
                "            else:",
                "                response = PlainTextResponse(\"Method Not Allowed\", status_code=405)",
                "            await response(scope, receive, send)",
                "        else:"
              ],
              "context_line": "            await self.app(scope, receive, send)",
              "post_context": [
                "",
                "    def __eq__(self, other: typing.Any) -> bool:",
                "        return (",
                "            isinstance(other, Route)",
                "            and self.path == other.path"
              ],
              "vars": {
                "self": "<fastapi.routing.APIRoute object at 0x110c1d310>",
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function ExceptionMiddleware.__call__.<locals>.sender at 0x110c48560>"
              },
              "in_app": true
            },
            {
              "filename": "starlette/routing.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/starlette/routing.py",
              "function": "app",
              "module": "starlette.routing",
              "lineno": 52,
              "pre_context": [
                "    is_coroutine = iscoroutinefunction_or_partial(func)",
                "",
                "    async def app(scope: Scope, receive: Receive, send: Send) -> None:",
                "        request = Request(scope, receive=receive, send=send)",
                "        if is_coroutine:"
              ],
              "context_line": "            response = await func(request)",
              "post_context": [
                "        else:",
                "            response = await run_in_threadpool(func, request)",
                "        await response(scope, receive, send)",
                "",
                "    return app"
              ],
              "vars": {
                "scope": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "receive": "<function MessageLoggerMiddleware.__call__.<locals>.inner_receive at 0x110c354d0>",
                "send": "<function ExceptionMiddleware.__call__.<locals>.sender at 0x110c48560>",
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "func": "<function get_request_handler.<locals>.app at 0x110c11f80>",
                "is_coroutine": "True"
              },
              "in_app": true
            },
            {
              "filename": "fastapi/routing.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/fastapi/routing.py",
              "function": "app",
              "module": "fastapi.routing",
              "lineno": 202,
              "pre_context": [
                "        values, errors, background_tasks, sub_response, _ = solved_result",
                "        if errors:",
                "            raise RequestValidationError(errors, body=body)",
                "        else:",
                "            raw_response = await run_endpoint_function("
              ],
              "context_line": "                dependant=dependant, values=values, is_coroutine=is_coroutine",
              "post_context": [
                "            )",
                "",
                "            if isinstance(raw_response, Response):",
                "                if raw_response.background is None:",
                "                    raw_response.background = background_tasks"
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "body": {
                  "dateOfBirth": "'2021-06-23'",
                  "firstName": "'string'",
                  "lastName": "'string'",
                  "insurerCode": "'string'",
                  "memberId": "'string'",
                  "gender": "'M'",
                  "dateOfService": "'2021-06-23'"
                },
                "body_bytes": "b'{\\n  \"dateOfBirth\": \"2021-06-23\",\\n  \"firstName\": \"string\",\\n  \"lastName\": \"string\",\\n  \"insurerCode\": \"string\",\\n  \"memberId\": \"string\",\\n  \"gender\": \"M\",\\n  \"dateOfService\": \"2021-06-23\"\\n}'",
                "solved_result": [
                  {
                    "eligibility_request": "EligibilityRequest(***)",
                    "request": {
                      "type": "'http'",
                      "asgi": {
                        "version": "'3.0'",
                        "spec_version": "'2.1'"
                      },
                      "http_version": "'1.1'",
                      "server": [
                        "'127.0.0.1'",
                        "8080"
                      ],
                      "client": [
                        "'127.0.0.1'",
                        "49517"
                      ],
                      "scheme": "'http'",
                      "method": "'POST'",
                      "root_path": "''",
                      "path": "'/api/v1/change-health/eligibility'",
                      "raw_path": "b'/api/v1/change-health/eligibility'"
                    }
                  },
                  [],
                  "None",
                  "<starlette.responses.Response object at 0x110c7b490>",
                  {
                    "(<fastapi.security.http.HTTPBasic object at 0x10e113950>, ())": "HTTPBasicCredentials(username='a_service_user_for_eligibility', password='a_super_secret_token_shhhh')",
                    "(<function authenticate_http_basic at 0x10df35710>, ())": "True"
                  }
                ],
                "values": {
                  "eligibility_request": "EligibilityRequest(***)",
                  "request": {
                    "type": "'http'",
                    "asgi": {
                      "version": "'3.0'",
                      "spec_version": "'2.1'"
                    },
                    "http_version": "'1.1'",
                    "server": [
                      "'127.0.0.1'",
                      "8080"
                    ],
                    "client": [
                      "'127.0.0.1'",
                      "49517"
                    ],
                    "scheme": "'http'",
                    "method": "'POST'",
                    "root_path": "''",
                    "path": "'/api/v1/change-health/eligibility'",
                    "raw_path": "b'/api/v1/change-health/eligibility'"
                  }
                },
                "errors": [],
                "background_tasks": "None",
                "sub_response": "<starlette.responses.Response object at 0x110c7b490>",
                "_": {
                  "(<fastapi.security.http.HTTPBasic object at 0x10e113950>, ())": "HTTPBasicCredentials(username='a_service_user_for_eligibility', password='a_super_secret_token_shhhh')",
                  "(<function authenticate_http_basic at 0x10df35710>, ())": "True"
                },
                "actual_response_class": "<class 'starlette.responses.JSONResponse'>"
              },
              "in_app": true
            },
            {
              "filename": "fastapi/routing.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/fastapi/routing.py",
              "function": "run_endpoint_function",
              "module": "fastapi.routing",
              "lineno": 148,
              "pre_context": [
                "    # Only called by get_request_handler. Has been split into its own function to",
                "    # facilitate profiling endpoints, since inner functions are harder to profile.",
                "    assert dependant.call is not None, \"dependant.call must be a function\"",
                "",
                "    if is_coroutine:"
              ],
              "context_line": "        return await dependant.call(**values)",
              "post_context": [
                "    else:",
                "        return await run_in_threadpool(dependant.call, **values)",
                "",
                "",
                "def get_request_handler("
              ],
              "vars": {
                "dependant": "<fastapi.dependencies.models.Dependant object at 0x110c1d350>",
                "values": {
                  "eligibility_request": "EligibilityRequest(***)",
                  "request": {
                    "type": "'http'",
                    "asgi": {
                      "version": "'3.0'",
                      "spec_version": "'2.1'"
                    },
                    "http_version": "'1.1'",
                    "server": [
                      "'127.0.0.1'",
                      "8080"
                    ],
                    "client": [
                      "'127.0.0.1'",
                      "49517"
                    ],
                    "scheme": "'http'",
                    "method": "'POST'",
                    "root_path": "''",
                    "path": "'/api/v1/change-health/eligibility'",
                    "raw_path": "b'/api/v1/change-health/eligibility'"
                  }
                },
                "is_coroutine": "True"
              },
              "in_app": true
            },
            {
              "filename": "slowapi/extension.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/slowapi/extension.py",
              "function": "async_wrapper",
              "module": "slowapi.extension",
              "lineno": 631,
              "pre_context": [
                "                        if self._auto_check and not getattr(",
                "                            request.state, \"_rate_limiting_complete\", False",
                "                        ):",
                "                            self._check_request_limit(request, func, False)",
                "                            request.state._rate_limiting_complete = True"
              ],
              "context_line": "                    response = await func(*args, **kwargs)  # type: ignore",
              "post_context": [
                "                    if self.enabled:",
                "                        if not isinstance(response, Response):",
                "                            # get the response object from the decorated endpoint function",
                "                            self._inject_headers(",
                "                                kwargs.get(\"response\"), request.state.view_rate_limit  # type: ignore"
              ],
              "vars": {
                "args": [],
                "kwargs": {
                  "eligibility_request": "EligibilityRequest(***)",
                  "request": {
                    "type": "'http'",
                    "asgi": {
                      "version": "'3.0'",
                      "spec_version": "'2.1'"
                    },
                    "http_version": "'1.1'",
                    "server": [
                      "'127.0.0.1'",
                      "8080"
                    ],
                    "client": [
                      "'127.0.0.1'",
                      "49517"
                    ],
                    "scheme": "'http'",
                    "method": "'POST'",
                    "root_path": "''",
                    "path": "'/api/v1/change-health/eligibility'",
                    "raw_path": "b'/api/v1/change-health/eligibility'"
                  }
                },
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "func": "<function get_eligibility_from_change_health at 0x11003d170>",
                "idx": "0",
                "self": "<slowapi.extension.Limiter object at 0x10de79510>"
              },
              "in_app": true
            },
            {
              "filename": "app/api/v1/endpoints/change_health.py",
              "abs_path": "/Users/trevor.currie/Code/eligibility-service/app/app/api/v1/endpoints/change_health.py",
              "function": "get_eligibility_from_change_health",
              "module": "app.api.v1.endpoints.change_health",
              "lineno": 26,
              "pre_context": [
                "    async with httpx.AsyncClient() as client:",
                "        pass",
                "    external_response = await eligibility.perform_eligibility_request(",
                "        client,",
                "        external.EligibilityRequest.from_service_eligibility_request("
              ],
              "context_line": "            eligibility_request,",
              "post_context": [
                "        ),",
                "    )",
                "    response = external_response.to_service_eligibility_response()",
                "    logger.info(",
                "        ("
              ],
              "vars": {
                "request": {
                  "type": "'http'",
                  "asgi": {
                    "version": "'3.0'",
                    "spec_version": "'2.1'"
                  },
                  "http_version": "'1.1'",
                  "server": [
                    "'127.0.0.1'",
                    "8080"
                  ],
                  "client": [
                    "'127.0.0.1'",
                    "49517"
                  ],
                  "scheme": "'http'",
                  "method": "'POST'",
                  "root_path": "''",
                  "path": "'/api/v1/change-health/eligibility'",
                  "raw_path": "b'/api/v1/change-health/eligibility'"
                },
                "eligibility_request": "EligibilityRequest(***)",
                "logger": "<Logger app.api.v1.endpoints.change_health (DEBUG)>",
                "client": "<httpx.AsyncClient object at 0x110c8e990>"
              },
              "in_app": true
            },
            {
              "filename": "app/domain/change_health/eligibility.py",
              "abs_path": "/Users/trevor.currie/Code/eligibility-service/app/app/domain/change_health/eligibility.py",
              "function": "perform_eligibility_request",
              "module": "app.domain.change_health.eligibility",
              "lineno": 30,
              "pre_context": [
                "                content=request.json(),",
                "                headers={",
                "                    \"Content-Type\": \"application/json\",",
                "                    **credentials.authorization_header,",
                "                },"
              ],
              "context_line": "                timeout=settings.CHANGE_HEALTH__TIMEOUT_SECONDS,",
              "post_context": [
                "            )",
                "        except httpx.ReadTimeout as e:",
                "            raise ApiTimeoutError(e, api_endpoint=settings.CHANGE_HEALTH__ENDPOINT)",
                "        if response.status_code == 429:",
                "            raise ApiRateLimitError("
              ],
              "vars": {
                "client": "<httpx.AsyncClient object at 0x110c8e990>",
                "request": "EligibilityRequest(***)",
                "span": "<Span(op='http', description:'POST https://sandbox.apis.changehealthcare.com/medicalnetwork/eligibility/v3', trace_id='9c735fd66dca41eaae107cf029f4a34e', span_id='bcc5109d4b867616', parent_span_id='8f9ce490190cbb01', sampled=True)>"
              },
              "in_app": true
            },
            {
              "filename": "httpx/_client.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/httpx/_client.py",
              "function": "post",
              "module": "httpx._client",
              "lineno": 1636,
              "pre_context": [
                "            params=params,",
                "            headers=headers,",
                "            cookies=cookies,",
                "            auth=auth,",
                "            allow_redirects=allow_redirects,"
              ],
              "context_line": "            timeout=timeout,",
              "post_context": [
                "        )",
                "",
                "    async def put(",
                "        self,",
                "        url: URLTypes,"
              ],
              "vars": {
                "self": "<httpx.AsyncClient object at 0x110c8e990>",
                "url": "AnyHttpUrl('https://sandbox.apis.changehealthcare.com/medicalnetwork/eligibility/v3', scheme='https', host='sandbox.apis.changehealthcare.com', tld='com', host_type='domain', path='/medicalnetwork/eligibility/v3')",
                "content": "'{\"controlNumber\": \"123456789\", \"tradingPartnerServiceId\": \"string\", \"provider\": {\"organizationName\": \"Hinge Health, Inc\", \"npi\": \"1962939314\"}, \"subscriber\": {\"firstName\": \"string\", \"lastName\": \"string\", \"memberId\": \"string\", \"gender\": \"M\", \"dateOfBirth\": \"20210623\"}, \"encounter\": {\"dateOfService\": \"20210623\"}}'",
                "data": "None",
                "files": "None",
                "json": "None",
                "params": "None",
                "headers": {
                  "Content-Type": "'application/json'",
                  "Authorization": "'Bearer eyJraWQiOiIxIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhY2Nlc3NfdG9rZW4iOiJEWDBtQkVJWEZBUXd5cVN0NVRtOVU1T25jRERMIiwiYXVkIjoiYXBpUGxhdGZvcm0iLCJhcGlfcHJvZHVjdF9saXN0IjpbIlRQX1Byb2R1Y3RfVHJhZGluZ1BhcnRuZXJzX3Y3IiwiTU5fUHJvZHVjdF9FbGlnaWJpbGl0eV92MyJdLCJhcHBsaWNhdGlvbl9uYW1lIjoiTU5fSGluZ2VfSGVhbHRoX0FwcCIsIm5iZiI6MTYyNDQ3MjY4MCwiZGV2ZWxvcGVyX2VtYWlsIjoibmF0aGFuLnN3YXJ0bGV5QGhpbmdlaGVhbHRoLmNvbSIsImlzcyI6Imh0dHBzOlwvXC9zYW5kYm94LmFwaXMuY2hhbmdlaGVhbHRoY2FyZS5jb20iLCJzY29wZXMiOiIiLCJleHAiOjE2MjQ0NzYyOD..."
                },
                "cookies": "None",
                "auth": "<httpx._config.UnsetType object at 0x10e0f16d0>"
              },
              "in_app": true
            },
            {
              "filename": "httpx/_client.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/httpx/_client.py",
              "function": "request",
              "module": "httpx._client",
              "lineno": 1362,
              "pre_context": [
                "            params=params,",
                "            headers=headers,",
                "            cookies=cookies,",
                "        )",
                "        response = await self.send("
              ],
              "context_line": "            request, auth=auth, allow_redirects=allow_redirects, timeout=timeout",
              "post_context": [
                "        )",
                "        return response",
                "",
                "    async def send(",
                "        self,"
              ],
              "vars": {
                "self": "<httpx.AsyncClient object at 0x110c8e990>",
                "method": "'POST'",
                "url": "AnyHttpUrl('https://sandbox.apis.changehealthcare.com/medicalnetwork/eligibility/v3', scheme='https', host='sandbox.apis.changehealthcare.com', tld='com', host_type='domain', path='/medicalnetwork/eligibility/v3')",
                "content": "'{\"controlNumber\": \"123456789\", \"tradingPartnerServiceId\": \"string\", \"provider\": {\"organizationName\": \"Hinge Health, Inc\", \"npi\": \"1962939314\"}, \"subscriber\": {\"firstName\": \"string\", \"lastName\": \"string\", \"memberId\": \"string\", \"gender\": \"M\", \"dateOfBirth\": \"20210623\"}, \"encounter\": {\"dateOfService\": \"20210623\"}}'",
                "data": "None",
                "files": "None",
                "json": "None",
                "params": "None",
                "headers": {
                  "Content-Type": "'application/json'",
                  "Authorization": "'Bearer eyJraWQiOiIxIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhY2Nlc3NfdG9rZW4iOiJEWDBtQkVJWEZBUXd5cVN0NVRtOVU1T25jRERMIiwiYXVkIjoiYXBpUGxhdGZvcm0iLCJhcGlfcHJvZHVjdF9saXN0IjpbIlRQX1Byb2R1Y3RfVHJhZGluZ1BhcnRuZXJzX3Y3IiwiTU5fUHJvZHVjdF9FbGlnaWJpbGl0eV92MyJdLCJhcHBsaWNhdGlvbl9uYW1lIjoiTU5fSGluZ2VfSGVhbHRoX0FwcCIsIm5iZiI6MTYyNDQ3MjY4MCwiZGV2ZWxvcGVyX2VtYWlsIjoibmF0aGFuLnN3YXJ0bGV5QGhpbmdlaGVhbHRoLmNvbSIsImlzcyI6Imh0dHBzOlwvXC9zYW5kYm94LmFwaXMuY2hhbmdlaGVhbHRoY2FyZS5jb20iLCJzY29wZXMiOiIiLCJleHAiOjE2MjQ0NzYyOD..."
                },
                "cookies": "None"
              },
              "in_app": true
            },
            {
              "filename": "httpx/_client.py",
              "abs_path": "/Users/trevor.currie/Library/Caches/pypoetry/virtualenvs/eligibility-service-pgaYkPUD-py3.7/lib/python3.7/site-packages/httpx/_client.py",
              "function": "send",
              "module": "httpx._client",
              "lineno": 1389,
              "pre_context": [
                "        See also: [Request instances][0]",
                "",
                "        [0]: /advanced/#request-instances",
                "        \"\"\"",
                "        if self._state == ClientState.CLOSED:"
              ],
              "context_line": "            raise RuntimeError(\"Cannot send a request, as the client has been closed.\")",
              "post_context": [
                "",
                "        self._state = ClientState.OPENED",
                "        timeout = self.timeout if isinstance(timeout, UnsetType) else Timeout(timeout)",
                "",
                "        auth = self._build_request_auth(request, auth)"
              ],
              "vars": {
                "self": "<httpx.AsyncClient object at 0x110c8e990>",
                "request": "<Request('POST', 'https://sandbox.apis.changehealthcare.com/medicalnetwork/eligibility/v3')>",
                "stream": "False",
                "auth": "<httpx._config.UnsetType object at 0x10e0f16d0>",
                "allow_redirects": "True",
                "timeout": "180.0"
              },
              "in_app": true
            }
          ]
        }
      }
    ]
  },
  "event_id": "66bcb5937e7c4227b7e2ac1741cb40c9",
  "timestamp": "2021-06-23T18:24:41.095402Z",
  "breadcrumbs": {
    "values": [
      {
        "type": "log",
        "level": "info",
        "category": "root",
        "message": "Processing request id: 510b1682-642a-426d-8183-17d74d3d7834",
        "timestamp": "2021-06-23T18:24:34.228488Z",
        "data": {
          "request.id": "UUID('510b1682-642a-426d-8183-17d74d3d7834')",
          "request.type": "http",
          "request.http_version": "1.1",
          "request.server": [
            "127.0.0.1",
            8080
          ],
          "request.client": [
            "127.0.0.1",
            49517
          ],
          "request.scheme": "http",
          "request.method": "POST",
          "request.path": "/api/v1/change-health/eligibility",
          "request.query_string": ""
        }
      },
      {
        "type": "http",
        "category": "httplib",
        "data": {},
        "timestamp": "2021-06-23T18:24:41.082723Z"
      },
      {
        "type": "log",
        "level": "info",
        "category": "uvicorn.access",
        "message": "127.0.0.1:49517 - \"POST /api/v1/change-health/eligibility HTTP/1.1\" 500",
        "timestamp": "2021-06-23T18:24:41.083654Z",
        "data": {}
      }
    ]
  },
  "transaction": "app.api.v1.endpoints.change_health.get_eligibility_from_change_health",
  "contexts": {
    "trace": {
      "trace_id": "9c735fd66dca41eaae107cf029f4a34e",
      "span_id": "8f9ce490190cbb01",
      "parent_span_id": null,
      "op": "http.server",
      "description": null
    },
    "runtime": {
      "name": "CPython",
      "version": "3.7.10",
      "build": "3.7.10 (default, Mar  1 2021, 14:52:28) \n[Clang 12.0.0 (clang-1200.0.32.29)]"
    }
  },
  "modules": {
    "zipp": "3.4.1",
    "wheel": "0.36.2",
    "uvicorn": "0.13.4",
    "urllib3": "1.26.5",
    "typing-extensions": "3.10.0.0",
    "typed-ast": "1.4.3",
    "toml": "0.10.2",
    "text-unidecode": "1.3",
    "tenacity": "7.0.0",
    "stevedore": "3.3.0",
    "starlette": "0.14.2",
    "sqlalchemy": "1.4.17",
    "sniffio": "1.2.0",
    "smmap": "4.0.0",
    "slowapi": "0.1.4",
    "six": "1.16.0",
    "single-source": "0.1.5",
    "setuptools": "53.1.0",
    "sentry-sdk": "1.1.0",
    "safety": "1.10.3",
    "rfc3986": "1.5.0",
    "requests": "2.25.1",
    "regex": "2021.4.4",
    "redis": "3.5.3",
    "pyyaml": "5.4.1",
    "python-levenshtein": "0.12.2",
    "python-json-logger": "2.0.1",
    "python-editor": "1.0.4",
    "python-dotenv": "0.17.1",
    "python-dateutil": "2.8.1",
    "pytest": "6.2.4",
    "pytest-pycharm": "0.7.0",
    "pytest-mock": "3.6.1",
    "pytest-lazy-fixture": "0.6.3",
    "pytest-httpx": "0.11.0",
    "pytest-freezegun": "0.4.2",
    "pytest-env": "0.6.2",
    "pytest-dotenv": "0.5.2",
    "pytest-cov": "2.12.0",
    "pytest-asyncio": "0.14.0",
    "pyparsing": "2.4.7",
    "pydantic": "1.8.2",
    "py": "1.10.0",
    "psycopg2-binary": "2.8.6",
    "pluggy": "0.13.1",
    "pip": "21.1.1",
    "pbr": "5.6.0",
    "pathspec": "0.8.1",
    "packaging": "20.9",
    "ordered-set": "4.0.2",
    "mypy": "0.812",
    "mypy-extensions": "0.4.3",
    "mock": "4.0.3",
    "markupsafe": "2.0.1",
    "mako": "1.1.4",
    "loguru": "0.5.3",
    "limits": "1.5.1",
    "iniconfig": "1.1.1",
    "importlib-metadata": "4.4.0",
    "idna": "2.10",
    "httpx": "0.17.1",
    "httpcore": "0.12.3",
    "hiro": "0.5.1",
    "hiredis": "2.0.0",
    "h11": "0.12.0",
    "greenlet": "1.1.0",
    "gitpython": "3.1.17",
    "gitdb": "4.0.7",
    "freezegun": "1.1.0",
    "fastapi": "0.65.1",
    "fastapi-health": "0.1.0",
    "faker": "8.4.0",
    "dparse": "0.5.1",
    "deepdiff": "5.5.0",
    "coverage": "5.5",
    "click": "7.1.2",
    "chardet": "4.0.0",
    "certifi": "2021.5.30",
    "bump2version": "1.0.1",
    "black": "20.8b1",
    "bandit": "1.7.0",
    "attrs": "21.2.0",
    "async-timeout": "3.0.1",
    "appdirs": "1.4.4",
    "alembic": "1.6.5",
    "aioredis": "1.3.1",
    "aenum": "3.1.0"
  },
  "extra": {
    "sys.argv": [
      "/Users/trevor.currie/Code/eligibility-service/app/app/main.py"
    ]
  },
  "request": {
    "method": "POST",
    "headers": {
      "host": "localhost:8080",
      "connection": "keep-alive",
      "content-length": "183",
      "accept": "application/json",
      "authorization": "",
      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36",
      "content-type": "application/json",
      "sec-gpc": "1",
      "origin": "http://localhost:8080",
      "sec-fetch-site": "same-origin",
      "sec-fetch-mode": "cors",
      "sec-fetch-dest": "empty",
      "referer": "http://localhost:8080/docs",
      "accept-encoding": "gzip, deflate, br",
      "accept-language": "en-US,en;q=0.9",
      "cookie": ""
    },
    "query_string": null,
    "url": "http://localhost:8080/api/v1/change-health/eligibility"
  },
  "release": "173efbee3f020247dff214db033bee18f3f9fadd",
  "environment": "development",
  "server_name": "big-lurch",
  "sdk": {
    "name": "sentry.python",
    "version": "1.1.0",
    "packages": [
      {
        "name": "pypi:sentry-sdk",
        "version": "1.1.0"
      }
    ],
    "integrations": [
      "argv",
      "atexit",
      "dedupe",
      "excepthook",
      "logging",
      "modules",
      "sqlalchemy",
      "stdlib",
      "threading"
    ]
  },
  "platform": "python",
  "_meta": {
    "exception": {
      "values": {
        "0": {
          "stacktrace": {
            "frames": {
              "0": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "1": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "2": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "3": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "4": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "5": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "6": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  },
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "7": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "8": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "9": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "10": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  },
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "11": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "12": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "13": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "14": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  },
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "15": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "16": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "17": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "18": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "19": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "20": {
                "vars": {
                  "scope": {
                    "": {
                      "len": 18
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "21": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  },
                  "solved_result": {
                    "0": {
                      "request": {
                        "asgi": {
                          "version": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          },
                          "spec_version": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          }
                        },
                        "server": {
                          "0": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          },
                          "1": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          }
                        },
                        "client": {
                          "0": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          },
                          "1": {
                            "": {
                              "rem": [
                                [
                                  "!limit",
                                  "x"
                                ]
                              ]
                            }
                          }
                        },
                        "": {
                          "len": 18
                        }
                      }
                    }
                  },
                  "values": {
                    "request": {
                      "": {
                        "len": 18
                      }
                    }
                  },
                  "": {
                    "len": 23
                  }
                }
              },
              "22": {
                "vars": {
                  "values": {
                    "request": {
                      "": {
                        "len": 18
                      }
                    }
                  }
                }
              },
              "23": {
                "vars": {
                  "kwargs": {
                    "request": {
                      "": {
                        "len": 18
                      }
                    }
                  },
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "24": {
                "vars": {
                  "request": {
                    "": {
                      "len": 18
                    }
                  }
                }
              },
              "26": {
                "vars": {
                  "headers": {
                    "Authorization": {
                      "": {
                        "len": 938,
                        "rem": [
                          [
                            "!limit",
                            "x",
                            509,
                            512
                          ]
                        ]
                      }
                    }
                  },
                  "": {
                    "len": 12
                  }
                }
              },
              "27": {
                "vars": {
                  "headers": {
                    "Authorization": {
                      "": {
                        "len": 938,
                        "rem": [
                          [
                            "!limit",
                            "x",
                            509,
                            512
                          ]
                        ]
                      }
                    }
                  },
                  "": {
                    "len": 14
                  }
                }
              }
            }
          }
        }
      }
    },
    "request": {
      "headers": {
        "authorization": {
          "": {
            "rem": [
              [
                "!config",
                "x",
                0,
                82
              ]
            ]
          }
        },
        "cookie": {
          "": {
            "rem": [
              [
                "!config",
                "x",
                0,
                742
              ]
            ]
          }
        }
      }
    }
  }
}
